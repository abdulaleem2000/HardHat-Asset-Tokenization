{
  "address": "0xE9a34B8253A67F7448595E176B9d7E52c42b2849",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetDetails",
          "name": "_assetDetails",
          "type": "tuple"
        },
        {
          "internalType": "address payable",
          "name": "_custodion",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetDetails",
          "name": "assetInfo",
          "type": "tuple"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "custodian",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b3aa9208282372618e204a43fbbca4b76983421d89598d7a92ff9aa3ed46ef1",
  "receipt": {
    "to": null,
    "from": "0x7fD4f0C61B2aebb92B018C5B3D36c30981E7FA80",
    "contractAddress": "0xE9a34B8253A67F7448595E176B9d7E52c42b2849",
    "transactionIndex": 10,
    "gasUsed": "574496",
    "logsBloom": "0x
    "blockHash": "0x95503b8fae2a10d886f468f360dc560435550581544c14d369f6eefd5b043aa4",
    "transactionHash": "0x6b3aa9208282372618e204a43fbbca4b76983421d89598d7a92ff9aa3ed46ef1",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 42988221,
        "transactionHash": "0x6b3aa9208282372618e204a43fbbca4b76983421d89598d7a92ff9aa3ed46ef1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007fd4f0c61b2aebb92b018c5b3d36c30981e7fa80",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000030fc06901e000000000000000000000000000000000000000000000000000002d8115c953865c0000000000000000000000000000000000000000000003f8b38b26bc1023ddec000000000000000000000000000000000000000000000000002a71556051a65c0000000000000000000000000000000000000000000003f8b38e367c7925bdec",
        "logIndex": 25,
        "blockHash": "0x95503b8fae2a10d886f468f360dc560435550581544c14d369f6eefd5b043aa4"
      }
    ],
    "blockNumber": 42988221,
    "cumulativeGasUsed": "3215465",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "name": "State Building",
      "description": "America's state building. Very long and big",
      "value": 800000
    },
    "0x9F5e972d10C79A86f9FC2C4DC2463cf2E411B536",
    "0x40C0aacbE51Da31A9D3D7D10b76c9ed8A51D7aD7"
  ],
  "numDeployments": 7,
  "solcInputHash": "c33ce6d08099b9c54559e64f59277f08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetDetails\",\"name\":\"_assetDetails\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"_custodion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetDetails\",\"name\":\"assetInfo\",\"type\":\"tuple\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreateAssetToken.sol\":\"AssetToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/CreateAssetToken.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./CreateToken.sol\\\";\\n\\n\\n// Struct to represent asset details\\nstruct AssetDetails {\\n    string name;\\n    string description;\\n    uint256 value;\\n}\\n\\n// AssetToken represents the tokenized version of a real-world asset\\ncontract AssetToken{\\n    // Address of the custodian who holds the underlying asset\\n    address payable public immutable custodian;//account address of property owner\\n    address public immutable owner;\\n    //address immutable tokenContractAddress;\\n    AssetDetails assetDetails;\\n    MyToken myToken;\\n    address public tokenContractAddress;\\n    // Mapping from token ID to asset details\\n    //mapping(address => AssetDetails) public assetDetails;\\n\\n    // Event to notify when tokens are minted (created)\\n    event Mint(address indexed to, uint256 amount, AssetDetails assetInfo);\\n\\n    // Event to notify when tokens are burned (destroyed)\\n    event Burn(address indexed from, uint256 amount);\\n\\n    // Modifier to ensure that only the custodian can execute a function\\n    modifier onlyCustodian() {\\n        require(msg.sender == custodian, \\\"Not the custodian\\\");\\n        _;\\n    }\\n\\n    // Modifier to ensure that only the owner can execute a function\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\n        _;\\n    }\\n    constructor(AssetDetails memory _assetDetails, address payable _custodion, address _tokenContractAddress){\\n                assetDetails = _assetDetails;\\n                custodian = _custodion;\\n                tokenContractAddress = _tokenContractAddress;\\n                myToken = MyToken(_tokenContractAddress);\\n                owner = msg.sender;\\n\\n    }\\n  \\n\\n    // function getTokenName() public view  onlyOwner returns (string memory) {\\n    //     return myToken.getTokenName();\\n    // }\\n\\n    // function getBalance() public view  onlyOwner returns (uint256) {\\n    //     return myToken.balanceOf(owner);\\n    // }\\n\\n    // function getSender() public view onlyOwner returns (address) {\\n    //     return owner;\\n    // }\\n\\n    function getAssetDetails() public view onlyOwner returns (AssetDetails memory) {\\n        return assetDetails;\\n    }\\n\\n\\n\\n\\n    // constructor(\\n    //     AssetDetails memory _assetDetails,\\n    //     address _tokenContractAddress,\\n        \\n    //     address _custodian\\n    //     )  {\\n\\n    //     custodian = _custodian;\\n    //     tokenContractAddress = _tokenContractAddress;\\n    //     // Mint initial supply to the custodian\\n    //     //_mint(_custodian, _initialSupply);\\n    // };\\n\\n    // Mint new tokens when the custodian creates more tokens (asset appreciation, for example)\\n    // function mint(\\n    //     address to,\\n    //     uint256 amount,\\n    //     AssetDetails memory assetInfo\\n    // ) external onlyCustodian {\\n    //     _mint(to, amount);\\n    //     assetDetails[amount] = assetInfo;\\n    //     emit Mint(to, amount, assetInfo);\\n    // }\\n\\n    // // Burn tokens when the custodian needs to remove tokens from circulation\\n    // function burn(address from, uint256 amount) external onlyCustodian {\\n    //     _burn(from, amount);\\n    //     // Remove asset details when burning tokens\\n    //     delete assetDetails[amount];\\n    //     emit Burn(from, amount);\\n    // }\\n\\n    // Update the custodian address\\n    // function updateCustodian(address newCustodian) external onlyOwner {\\n    //     custodian = newCustodian;\\n    // }\\n}\\n\",\"keccak256\":\"0xe665ef74fd996ca5d63b9269f45f47c402b721906d8ad52bb8822fd083a87f50\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/CreateToken.sol\":{\"content\":\"\\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MyToken is ERC20 {\\n    address public immutable i_owner;\\n    // Constructor: Set the token name, symbol, and initial supply\\n    constructor(string memory _tokenName, string memory _symbol,uint256 _divisibility,uint256 _initialSupply) ERC20(_tokenName, _symbol) {\\n        i_owner = msg.sender;\\n        _mint(msg.sender, _initialSupply * 10**18); // Initial supply: 1,000,000 tokens\\n      \\n\\n\\n    }\\n\\n    function getTokenName() public view returns (string memory) {\\n        string memory token = name();\\n        return token;\\n    }\\n    \\n}\",\"keccak256\":\"0x97a7285d13e117443f4053d23c615e2034777f1be1f497184b0999e3c70d084d\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162000e6138038062000e61833981810160405281019062000037919062000498565b8260008082015181600001908162000050919062000754565b50602082015181600101908162000068919062000754565b50604082015181600201559050508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050506200083b565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001cd8262000182565b810181811067ffffffffffffffff82111715620001ef57620001ee62000193565b5b80604052505050565b60006200020462000169565b9050620002128282620001c2565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111562000244576200024362000193565b5b6200024f8262000182565b9050602081019050919050565b60005b838110156200027c5780820151818401526020810190506200025f565b60008484015250505050565b60006200029f620002998462000226565b620001f8565b905082815260208101848484011115620002be57620002bd62000221565b5b620002cb8482856200025c565b509392505050565b600082601f830112620002eb57620002ea6200021c565b5b8151620002fd84826020860162000288565b91505092915050565b6000819050919050565b6200031b8162000306565b81146200032757600080fd5b50565b6000815190506200033b8162000310565b92915050565b6000606082840312156200035a57620003596200017d565b5b620003666060620001f8565b9050600082015167ffffffffffffffff81111562000389576200038862000217565b5b6200039784828501620002d3565b600083015250602082015167ffffffffffffffff811115620003be57620003bd62000217565b5b620003cc84828501620002d3565b6020830152506040620003e2848285016200032a565b60408301525092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200041b82620003ee565b9050919050565b6200042d816200040e565b81146200043957600080fd5b50565b6000815190506200044d8162000422565b92915050565b60006200046082620003ee565b9050919050565b620004728162000453565b81146200047e57600080fd5b50565b600081519050620004928162000467565b92915050565b600080600060608486031215620004b457620004b362000173565b5b600084015167ffffffffffffffff811115620004d557620004d462000178565b5b620004e38682870162000341565b9350506020620004f6868287016200043c565b9250506040620005098682870162000481565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200056657607f821691505b6020821081036200057c576200057b6200051e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620005a7565b620005f28683620005a7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620006356200062f620006298462000306565b6200060a565b62000306565b9050919050565b6000819050919050565b620006518362000614565b6200066962000660826200063c565b848454620005b4565b825550505050565b600090565b6200068062000671565b6200068d81848462000646565b505050565b5b81811015620006b557620006a960008262000676565b60018101905062000693565b5050565b601f8211156200070457620006ce8162000582565b620006d98462000597565b81016020851015620006e9578190505b62000701620006f88562000597565b83018262000692565b50505b505050565b600082821c905092915050565b6000620007296000198460080262000709565b1980831691505092915050565b600062000744838362000716565b9150826002028217905092915050565b6200075f8262000513565b67ffffffffffffffff8111156200077b576200077a62000193565b5b6200078782546200054d565b62000794828285620006b9565b600060209050601f831160018114620007cc5760008415620007b7578287015190505b620007c3858262000736565b86555062000833565b601f198416620007dc8662000582565b60005b828110156200080657848901518255600182019150602085019450602081019050620007df565b8683101562000826578489015162000822601f89168262000716565b8355505b6001600288020188555050505b505050505050565b60805160a0516105fb620008666000396000818160f701526102eb0152600060cb01526105fb6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063375b74c3146100515780635c5a0f931461006f57806382edaf941461008d5780638da5cb5b146100ab575b600080fd5b6100596100c9565b604051610066919061036f565b60405180910390f35b6100776100ed565b604051610084919061048a565b60405180910390f35b6100956102c3565b6040516100a291906104cd565b60405180910390f35b6100b36102e9565b6040516100c091906104cd565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6100f561030d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017a90610545565b60405180910390fd5b60006040518060600160405290816000820180546101a090610594565b80601f01602080910402602001604051908101604052809291908181526020018280546101cc90610594565b80156102195780601f106101ee57610100808354040283529160200191610219565b820191906000526020600020905b8154815290600101906020018083116101fc57829003601f168201915b5050505050815260200160018201805461023290610594565b80601f016020809104026020016040519081016040528092919081815260200182805461025e90610594565b80156102ab5780601f10610280576101008083540402835291602001916102ab565b820191906000526020600020905b81548152906001019060200180831161028e57829003601f168201915b50505050508152602001600282015481525050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60405180606001604052806060815260200160608152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103598261032e565b9050919050565b6103698161034e565b82525050565b60006020820190506103846000830184610360565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156103c45780820151818401526020810190506103a9565b60008484015250505050565b6000601f19601f8301169050919050565b60006103ec8261038a565b6103f68185610395565b93506104068185602086016103a6565b61040f816103d0565b840191505092915050565b6000819050919050565b61042d8161041a565b82525050565b6000606083016000830151848203600086015261045082826103e1565b9150506020830151848203602086015261046a82826103e1565b915050604083015161047f6040860182610424565b508091505092915050565b600060208201905081810360008301526104a48184610433565b905092915050565b60006104b78261032e565b9050919050565b6104c7816104ac565b82525050565b60006020820190506104e260008301846104be565b92915050565b600082825260208201905092915050565b7f4e6f7420746865206f776e657200000000000000000000000000000000000000600082015250565b600061052f600d836104e8565b915061053a826104f9565b602082019050919050565b6000602082019050818103600083015261055e81610522565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105ac57607f821691505b6020821081036105bf576105be610565565b5b5091905056fea26469706673582212203657dad9fc7576ca8b20fb32d6b83743eea201d79ced84081d8763261a2fba0d64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063375b74c3146100515780635c5a0f931461006f57806382edaf941461008d5780638da5cb5b146100ab575b600080fd5b6100596100c9565b604051610066919061036f565b60405180910390f35b6100776100ed565b604051610084919061048a565b60405180910390f35b6100956102c3565b6040516100a291906104cd565b60405180910390f35b6100b36102e9565b6040516100c091906104cd565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6100f561030d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017a90610545565b60405180910390fd5b60006040518060600160405290816000820180546101a090610594565b80601f01602080910402602001604051908101604052809291908181526020018280546101cc90610594565b80156102195780601f106101ee57610100808354040283529160200191610219565b820191906000526020600020905b8154815290600101906020018083116101fc57829003601f168201915b5050505050815260200160018201805461023290610594565b80601f016020809104026020016040519081016040528092919081815260200182805461025e90610594565b80156102ab5780601f10610280576101008083540402835291602001916102ab565b820191906000526020600020905b81548152906001019060200180831161028e57829003601f168201915b50505050508152602001600282015481525050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60405180606001604052806060815260200160608152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103598261032e565b9050919050565b6103698161034e565b82525050565b60006020820190506103846000830184610360565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156103c45780820151818401526020810190506103a9565b60008484015250505050565b6000601f19601f8301169050919050565b60006103ec8261038a565b6103f68185610395565b93506104068185602086016103a6565b61040f816103d0565b840191505092915050565b6000819050919050565b61042d8161041a565b82525050565b6000606083016000830151848203600086015261045082826103e1565b9150506020830151848203602086015261046a82826103e1565b915050604083015161047f6040860182610424565b508091505092915050565b600060208201905081810360008301526104a48184610433565b905092915050565b60006104b78261032e565b9050919050565b6104c7816104ac565b82525050565b60006020820190506104e260008301846104be565b92915050565b600082825260208201905092915050565b7f4e6f7420746865206f776e657200000000000000000000000000000000000000600082015250565b600061052f600d836104e8565b915061053a826104f9565b602082019050919050565b6000602082019050818103600083015261055e81610522565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105ac57607f821691505b6020821081036105bf576105be610565565b5b5091905056fea26469706673582212203657dad9fc7576ca8b20fb32d6b83743eea201d79ced84081d8763261a2fba0d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 795,
        "contract": "contracts/CreateAssetToken.sol:AssetToken",
        "label": "assetDetails",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AssetDetails)788_storage"
      },
      {
        "astId": 798,
        "contract": "contracts/CreateAssetToken.sol:AssetToken",
        "label": "myToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MyToken)937"
      },
      {
        "astId": 800,
        "contract": "contracts/CreateAssetToken.sol:AssetToken",
        "label": "tokenContractAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(MyToken)937": {
        "encoding": "inplace",
        "label": "contract MyToken",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AssetDetails)788_storage": {
        "encoding": "inplace",
        "label": "struct AssetDetails",
        "members": [
          {
            "astId": 783,
            "contract": "contracts/CreateAssetToken.sol:AssetToken",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 785,
            "contract": "contracts/CreateAssetToken.sol:AssetToken",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 787,
            "contract": "contracts/CreateAssetToken.sol:AssetToken",
            "label": "value",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}