{
  "address": "0x2b47b5361d5e93288F55d3C341803A96744b8BE2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "direction",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "grossAnnualRent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "netAmountRent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minInvestment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "homeInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetDetails",
          "name": "assetInfo",
          "type": "tuple"
        }
      ],
      "name": "TokenSold",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_query",
          "type": "string"
        }
      ],
      "name": "getTokenPur",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticsRequiredForOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_query",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        }
      ],
      "name": "purchaseTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x42c42694f6119e22f3da55da034538c50df04f1c6851ecbcc17e959895a64827",
  "receipt": {
    "to": null,
    "from": "0x7fD4f0C61B2aebb92B018C5B3D36c30981E7FA80",
    "contractAddress": "0x2b47b5361d5e93288F55d3C341803A96744b8BE2",
    "transactionIndex": 2,
    "gasUsed": "1095541",
    "logsBloom": "0x
    "blockHash": "0x6888af008aa2eb59bdc23bbb4911c1e6e9bfa5d476938cc7e81ffc75e5c8b1d0",
    "transactionHash": "0x42c42694f6119e22f3da55da034538c50df04f1c6851ecbcc17e959895a64827",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 44553267,
        "transactionHash": "0x42c42694f6119e22f3da55da034538c50df04f1c6851ecbcc17e959895a64827",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007fd4f0c61b2aebb92b018c5b3d36c30981e7fa80",
          "0x000000000000000000000000cfef2a3dc244ef7d0fb93c45e762d671445c4569"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b0dbe763cf6b000000000000000000000000000000000000000000000000001de9172ec228d070000000000000000000000000000000000000000000001321fd9e4808dc0b39b00000000000000000000000000000000000000000000000001d383b475e596570000000000000000000000000000000000000000000001321fe4f23f03fdaa4b",
        "logIndex": 5,
        "blockHash": "0x6888af008aa2eb59bdc23bbb4911c1e6e9bfa5d476938cc7e81ffc75e5c8b1d0"
      }
    ],
    "blockNumber": 44553267,
    "cumulativeGasUsed": "1193037",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x03bbCAa3C2bA0B7CfC3f60d33812B075740F2FdE"
  ],
  "numDeployments": 49,
  "solcInputHash": "e5d20c08b8117570d1c6780cd00f78f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"direction\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grossAnnualRent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netAmountRent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"homeInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetDetails\",\"name\":\"assetInfo\",\"type\":\"tuple\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_query\",\"type\":\"string\"}],\"name\":\"getTokenPur\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticsRequiredForOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_query\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"purchaseTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenSale.sol\":\"AssetTokenSale\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/NewToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// Struct to represent asset details\\nstruct AssetDetails {\\n    string name;\\n    string direction;\\n    uint256 amount;\\n    uint256 amountInterest;\\n    uint256 grossAnnualRent;\\n    uint256 netAmountRent;\\n    uint256 interestPayment;\\n    uint256 numberOfTokens;\\n    uint256 tokenPrice;\\n    uint256 minInvestment;\\n    uint256 homeInterest;\\n    uint256 deadline;\\n    \\n}\\n\\nstruct Details {\\n    string secMarket;\\n    string currency;\\n    string neighood;\\n    string yoc;\\n    string elevator;\\n    string buildedSurface;\\n    string bedrooms;\\n    string bathrooms;\\n    string isRented;\\n    string tokenName;\\n    string description;\\n    string dateCreated; \\n}\\n\\nstruct InvestmentDetails{\\n    uint256 tokenPurchase;\\n    string query;\\n    string userEmail;\\n    address userAddress;\\n}\\n\\n// AssetToken represents the tokenized version of a real-world asset\\ncontract AssetNewToken is ERC20 {\\n    // Address of the custodian who holds the underlying asset\\n    //address public custodian;\\n    address immutable owner;\\n    address immutable clientAddress;\\n    uint256 public tokenPriceInMatics;\\n    //uint256 decimals = 18;\\n    uint256 public totalAssets;\\n    // Mapping from token ID to asset details\\n    mapping(string => AssetDetails) public assetDetails;\\n    mapping(string => Details) public details;\\n\\n    mapping(uint256 => InvestmentDetails) public investments;\\n    uint256 public nextInvestmentId = 1;\\n    mapping(uint256 => InvestmentDetails)[] public investmentsArray;\\n    string[] public assetIds;\\n    uint256[] public investmentIds;\\n    //AssetDetails [] public assetDetails;\\n\\n    // Event to notify when tokens are minted (created)\\n    event Mint(address indexed to, uint256 amount, AssetDetails assetInfo);\\n\\n    // Event to notify when tokens are burned (destroyed)\\n    event Burn(address indexed from, uint256 amount);\\n\\n    // Modifier to ensure that only the custodian can execute a function\\n    // modifier onlyCustodian() {\\n    //     require(msg.sender == custodian, \\\"Not the custodian\\\");\\n    //     _;\\n    // }\\n\\n    // Modifier to ensure that only the owner can execute a function\\n    modifier onlyOwner() {\\n        require(msg.sender == owner || msg.sender == clientAddress, \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n\\n\\n    // Constructor initializes the ERC20 token\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _initialSupply\\n    ) ERC20(_name, _symbol) {\\n       \\n        owner = msg.sender;\\n        clientAddress = 0x07F1a67cCDB4b2EEcb6D4B4805B4962F4A2e73f9;\\n        // Mint initial supply to the custodian\\n        totalAssets = 0;\\n        _mint(msg.sender, _initialSupply * 10**18);\\n    }\\n\\n    // function getTokenPriceInDollars() public view returns(uint256)  {\\n    //     return tokenPriceInDollars;\\n//     // }\\n// function getValueWithDecimal(uint256 value) public pure returns (uint256) {\\n//         // Assume one decimal place\\n//         return value / 10;\\n//     }\\n    // Mint new tokens when the custodian creates more tokens (asset appreciation, for example)\\n    function mint(\\n        AssetDetails memory assetInfo,\\n        Details memory assetInfo2\\n    ) external onlyOwner {\\n       \\n        bytes memory bytesName = bytes(assetInfo.name);\\n        bytes memory bytesDirection = bytes(assetInfo.direction);\\n        bytes memory colon = bytes(\\\":\\\");\\n        bytes memory concatenated = abi.encodePacked(bytesName, colon ,bytesDirection);\\n        string memory result = string(concatenated);\\n\\n        totalAssets += 1;\\n        // uint256 value = getValueWithDecimal(assetInfo.tokenPrice);\\n        // assetInfo.tokenPrice = value;\\n        //uint256 propertyValue = assetInfo.propertyValue;\\n        tokenPriceInMatics = assetInfo.tokenPrice;\\n        //uint256 amount = BigNumber.from(input).mul(BigNumber.from(10).pow(decimals));\\n        //totalTokens = propertyValue/_tokenPrice;\\n\\n        _mint(msg.sender, assetInfo.numberOfTokens);\\n        assetDetails[result] = assetInfo;\\n        details[result] = assetInfo2;\\n        assetIds.push(result);\\n        //assetDetails.push(assetInfo);\\n        //tokenPrice = _tokenPrice;\\n        emit Mint(msg.sender, assetInfo.numberOfTokens, assetInfo);\\n\\n    }\\n    // function getTotalTokens() public view returns (uint256) {\\n    //     return totalTokens;\\n    // }\\n    function getAssetDetails(string memory _query) public view returns(AssetDetails memory) {\\n        \\n        return assetDetails[_query];\\n\\n        \\n    }\\n    function getAllAssetDetails() external view returns (AssetDetails[] memory,Details[] memory) {\\n        AssetDetails[] memory allDetails = new AssetDetails[](assetIds.length);\\n        Details[] memory allDetails2 = new Details[](assetIds.length);\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            string memory assetId = assetIds[i];\\n            allDetails[i] = assetDetails[assetId];\\n            allDetails2[i] = details[assetId];\\n        }\\n        return (allDetails, allDetails2);\\n    }\\n    \\n    function addInvestments(string memory _query, uint256 _tokensPurchase, address _userAddress, string memory _userEmail)public {\\n        InvestmentDetails memory newInvestment = InvestmentDetails(_tokensPurchase, _query, _userEmail, _userAddress);\\n\\n        investments[nextInvestmentId] = newInvestment;\\n        investmentIds.push(nextInvestmentId);\\n        nextInvestmentId++;\\n\\n    }\\n    //getting all investments\\n    function getInvestments()public view returns(InvestmentDetails[] memory){\\n        InvestmentDetails[] memory allDetails = new InvestmentDetails[](nextInvestmentId);\\n        for (uint256 i = 0; i < investmentIds.length; i++) {\\n            uint256 investmentId = investmentIds[i];\\n            allDetails[i] = investments[investmentId];\\n          \\n\\n        }\\n\\n        return allDetails;\\n    }\\n    // Burn tokens when the custodian needs to remove tokens from circulation\\n    function burn(address from, uint256 amount,string memory _query) external onlyOwner {\\n        _burn(from, amount);\\n        // Remove asset details when burning tokens\\n        delete assetDetails[_query];\\n        emit Burn(from, amount);\\n    }\\n\\n    // Update the custodian address\\n    // function updateCustodian(address newCustodian) external onlyOwner {\\n    //     custodian = newCustodian;\\n    // }\\n\\n    function approve(address spender, uint256 value) public override onlyOwner returns (bool) {\\n      \\n        return super.approve(spender, value);\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0xb37006a393d2d164aeb6a30122862438643443f72a72aecfedef9b4bb6498734\",\"license\":\"MIT\"},\"contracts/TokenSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\nimport \\\"./NewToken.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// Struct to represent asset details\\n\\ncontract AssetTokenSale {\\n    // Address of the token being sold\\n    address public tokenAddress;\\n    address public owner;\\n    AggregatorV3Interface public priceFeed;\\n    address public priceFeedAddress;\\n    uint256 public maticPrice;\\n    uint256 public balance;\\n    address public userAddress;\\n    uint256 public tokensPurchase;\\n    //Ass AssetNewToken(tokenAddress)\\n    AssetNewToken assetNewToken;\\n    uint256 public maticsRequiredForOneToken;\\n    //MyToken contractCreateToken\\n    // Event to notify when tokens are sold\\n    event TokenSold(\\n        address indexed buyer,\\n        uint256 amount,\\n        AssetDetails assetInfo\\n    );\\n\\n    // Modifier to ensure that only the owner can execute a function\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n    function getConversionRate(uint256 maticAmount, AggregatorV3Interface priceFeedI) internal view returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeedI.latestRoundData();\\n        //uint256 ethPrice = getPrice(priceFeed);\\n        //uint256 ans = uint256(answer * 10000000000);\\n        uint256 maticAmountInUsd = (uint256(answer)*maticAmount)/1e18;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return maticAmountInUsd;\\n    }\\n\\n    // Constructor initializes the token sale\\n    constructor(address _tokenAddress) {\\n        owner = msg.sender;\\n        tokenAddress = _tokenAddress;\\n        //userAddress = _userAddress;\\n        assetNewToken = AssetNewToken(_tokenAddress);\\n        //priceFeedAddress = _priceFeedAddress;\\n    }\\n\\n    function getPrice() public  {\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        maticPrice = getConversionRate(1e18, priceFeed);\\n    }\\n\\n    function getTokenPur(string memory _query) public payable returns (uint256) {\\n        maticsRequiredForOneToken = assetNewToken.getAssetDetails(_query).tokenPrice;\\n        return maticsRequiredForOneToken;\\n    }\\n\\n    function getSender() public view returns (address) {\\n        \\n         return  userAddress;\\n    }\\n    // Function to allow investors to purchase tokens\\n    function purchaseTokens(\\n     \\n        //AssetDetails memory assetInfo\\n        string memory _query,\\n        string memory _email\\n        //address _priceFeedAddress\\n    ) external payable {\\n        // Transfer tokens from the owner (seller) to the buyer\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        maticPrice = getConversionRate(1e18, priceFeed);\\n      //                             token price/8426061\\n        \\n        maticsRequiredForOneToken = assetNewToken.getAssetDetails(_query).tokenPrice;// 0.1 matic\\n        //uint256 _maticsRequired = (amount*assetInfo.price);\\n        \\n        tokensPurchase = msg.value / maticsRequiredForOneToken;\\n        balance = msg.value;\\n        //require(tokensPurchase > 0, \\\"Can't buy zero tokens, please buy more tokens\\\");\\n      \\n        assetNewToken.transferFrom(owner,msg.sender, uint256(tokensPurchase));\\n        assetNewToken.addInvestments(_query, tokensPurchase, msg.sender, _email);\\n       // emit TokenSold(tx.origin, msg.value,  assetNewToken.getAssetDetails(300));\\n    }\\n}\\n\",\"keccak256\":\"0x18e7d46f456a13e11d0ea9345e97442fed318952cf54e2ee97aeeb2425561ad4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200133a3803806200133a83398181016040528101906200003791906200016a565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200019c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001328262000105565b9050919050565b620001448162000125565b81146200015057600080fd5b50565b600081519050620001648162000139565b92915050565b60006020828403121562000183576200018262000100565b5b6000620001938482850162000153565b91505092915050565b61118e80620001ac6000396000f3fe6080604052600436106100c15760003560e01c80638e46bf661161007f578063b69ef8a811610059578063b69ef8a814610226578063e0abca0b14610251578063e2a3d6941461027c578063e4128fb3146102ac576100c1565b80638e46bf66146101b957806398d5fdca146101e45780639d76ea58146101fb576100c1565b8062b3c03b146100c657806314896790146100e257806345ea451a1461010d5780635e01eb5a14610138578063741bef1a146101635780638da5cb5b1461018e575b600080fd5b6100e060048036038101906100db91906109f0565b6102d7565b005b3480156100ee57600080fd5b506100f761059b565b6040516101049190610a81565b60405180910390f35b34801561011957600080fd5b506101226105a1565b60405161012f9190610a81565b60405180910390f35b34801561014457600080fd5b5061014d6105a7565b60405161015a9190610add565b60405180910390f35b34801561016f57600080fd5b506101786105d1565b6040516101859190610b57565b60405180910390f35b34801561019a57600080fd5b506101a36105f7565b6040516101b09190610add565b60405180910390f35b3480156101c557600080fd5b506101ce61061d565b6040516101db9190610a81565b60405180910390f35b3480156101f057600080fd5b506101f9610623565b005b34801561020757600080fd5b506102106106c2565b60405161021d9190610add565b60405180910390f35b34801561023257600080fd5b5061023b6106e6565b6040516102489190610a81565b60405180910390f35b34801561025d57600080fd5b506102666106ec565b6040516102739190610add565b60405180910390f35b61029660048036038101906102919190610b72565b610712565b6040516102a39190610a81565b60405180910390f35b3480156102b857600080fd5b506102c16107ca565b6040516102ce9190610add565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061036e670de0b6b3a7640000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107f0565b600481905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368fbe23e836040518263ffffffff1660e01b81526004016103cf9190610c3a565b600060405180830381865afa1580156103ec573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104159190610e5c565b61010001516009819055506009543461042e9190610f03565b60078190555034600581905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336007546040518463ffffffff1660e01b81526004016104be93929190610f34565b6020604051808303816000875af11580156104dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105019190610fa3565b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d816d5ae8360075433856040518563ffffffff1660e01b81526004016105659493929190610fd0565b600060405180830381600087803b15801561057f57600080fd5b505af1158015610593573d6000803e3d6000fd5b505050505050565b60075481565b60045481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106ba670de0b6b3a7640000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107f0565b600481905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368fbe23e836040518263ffffffff1660e01b815260040161076f9190610c3a565b600060405180830381865afa15801561078c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107b59190610e5c565b61010001516009819055506009549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610862919061109b565b5050509150506000670de0b6b3a7640000858361087f9190611116565b6108899190610f03565b9050809250505092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108fd826108b4565b810181811067ffffffffffffffff8211171561091c5761091b6108c5565b5b80604052505050565b600061092f610896565b905061093b82826108f4565b919050565b600067ffffffffffffffff82111561095b5761095a6108c5565b5b610964826108b4565b9050602081019050919050565b82818337600083830152505050565b600061099361098e84610940565b610925565b9050828152602081018484840111156109af576109ae6108af565b5b6109ba848285610971565b509392505050565b600082601f8301126109d7576109d66108aa565b5b81356109e7848260208601610980565b91505092915050565b60008060408385031215610a0757610a066108a0565b5b600083013567ffffffffffffffff811115610a2557610a246108a5565b5b610a31858286016109c2565b925050602083013567ffffffffffffffff811115610a5257610a516108a5565b5b610a5e858286016109c2565b9150509250929050565b6000819050919050565b610a7b81610a68565b82525050565b6000602082019050610a966000830184610a72565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac782610a9c565b9050919050565b610ad781610abc565b82525050565b6000602082019050610af26000830184610ace565b92915050565b6000819050919050565b6000610b1d610b18610b1384610a9c565b610af8565b610a9c565b9050919050565b6000610b2f82610b02565b9050919050565b6000610b4182610b24565b9050919050565b610b5181610b36565b82525050565b6000602082019050610b6c6000830184610b48565b92915050565b600060208284031215610b8857610b876108a0565b5b600082013567ffffffffffffffff811115610ba657610ba56108a5565b5b610bb2848285016109c2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bf5578082015181840152602081019050610bda565b60008484015250505050565b6000610c0c82610bbb565b610c168185610bc6565b9350610c26818560208601610bd7565b610c2f816108b4565b840191505092915050565b60006020820190508181036000830152610c548184610c01565b905092915050565b600080fd5b600080fd5b6000610c79610c7484610940565b610925565b905082815260208101848484011115610c9557610c946108af565b5b610ca0848285610bd7565b509392505050565b600082601f830112610cbd57610cbc6108aa565b5b8151610ccd848260208601610c66565b91505092915050565b610cdf81610a68565b8114610cea57600080fd5b50565b600081519050610cfc81610cd6565b92915050565b60006101808284031215610d1957610d18610c5c565b5b610d24610180610925565b9050600082015167ffffffffffffffff811115610d4457610d43610c61565b5b610d5084828501610ca8565b600083015250602082015167ffffffffffffffff811115610d7457610d73610c61565b5b610d8084828501610ca8565b6020830152506040610d9484828501610ced565b6040830152506060610da884828501610ced565b6060830152506080610dbc84828501610ced565b60808301525060a0610dd084828501610ced565b60a08301525060c0610de484828501610ced565b60c08301525060e0610df884828501610ced565b60e083015250610100610e0d84828501610ced565b61010083015250610120610e2384828501610ced565b61012083015250610140610e3984828501610ced565b61014083015250610160610e4f84828501610ced565b6101608301525092915050565b600060208284031215610e7257610e716108a0565b5b600082015167ffffffffffffffff811115610e9057610e8f6108a5565b5b610e9c84828501610d02565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f0e82610a68565b9150610f1983610a68565b925082610f2957610f28610ea5565b5b828204905092915050565b6000606082019050610f496000830186610ace565b610f566020830185610ace565b610f636040830184610a72565b949350505050565b60008115159050919050565b610f8081610f6b565b8114610f8b57600080fd5b50565b600081519050610f9d81610f77565b92915050565b600060208284031215610fb957610fb86108a0565b5b6000610fc784828501610f8e565b91505092915050565b60006080820190508181036000830152610fea8187610c01565b9050610ff96020830186610a72565b6110066040830185610ace565b81810360608301526110188184610c01565b905095945050505050565b600069ffffffffffffffffffff82169050919050565b61104281611023565b811461104d57600080fd5b50565b60008151905061105f81611039565b92915050565b6000819050919050565b61107881611065565b811461108357600080fd5b50565b6000815190506110958161106f565b92915050565b600080600080600060a086880312156110b7576110b66108a0565b5b60006110c588828901611050565b95505060206110d688828901611086565b94505060406110e788828901610ced565b93505060606110f888828901610ced565b925050608061110988828901611050565b9150509295509295909350565b600061112182610a68565b915061112c83610a68565b925082820261113a81610a68565b9150828204841483151761115157611150610ed4565b5b509291505056fea264697066735822122091d1d365a169f0770027a6fb7334cea6e9e84501063a2e43603841bed5a57ef364736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100c15760003560e01c80638e46bf661161007f578063b69ef8a811610059578063b69ef8a814610226578063e0abca0b14610251578063e2a3d6941461027c578063e4128fb3146102ac576100c1565b80638e46bf66146101b957806398d5fdca146101e45780639d76ea58146101fb576100c1565b8062b3c03b146100c657806314896790146100e257806345ea451a1461010d5780635e01eb5a14610138578063741bef1a146101635780638da5cb5b1461018e575b600080fd5b6100e060048036038101906100db91906109f0565b6102d7565b005b3480156100ee57600080fd5b506100f761059b565b6040516101049190610a81565b60405180910390f35b34801561011957600080fd5b506101226105a1565b60405161012f9190610a81565b60405180910390f35b34801561014457600080fd5b5061014d6105a7565b60405161015a9190610add565b60405180910390f35b34801561016f57600080fd5b506101786105d1565b6040516101859190610b57565b60405180910390f35b34801561019a57600080fd5b506101a36105f7565b6040516101b09190610add565b60405180910390f35b3480156101c557600080fd5b506101ce61061d565b6040516101db9190610a81565b60405180910390f35b3480156101f057600080fd5b506101f9610623565b005b34801561020757600080fd5b506102106106c2565b60405161021d9190610add565b60405180910390f35b34801561023257600080fd5b5061023b6106e6565b6040516102489190610a81565b60405180910390f35b34801561025d57600080fd5b506102666106ec565b6040516102739190610add565b60405180910390f35b61029660048036038101906102919190610b72565b610712565b6040516102a39190610a81565b60405180910390f35b3480156102b857600080fd5b506102c16107ca565b6040516102ce9190610add565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061036e670de0b6b3a7640000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107f0565b600481905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368fbe23e836040518263ffffffff1660e01b81526004016103cf9190610c3a565b600060405180830381865afa1580156103ec573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104159190610e5c565b61010001516009819055506009543461042e9190610f03565b60078190555034600581905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336007546040518463ffffffff1660e01b81526004016104be93929190610f34565b6020604051808303816000875af11580156104dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105019190610fa3565b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d816d5ae8360075433856040518563ffffffff1660e01b81526004016105659493929190610fd0565b600060405180830381600087803b15801561057f57600080fd5b505af1158015610593573d6000803e3d6000fd5b505050505050565b60075481565b60045481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106ba670de0b6b3a7640000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107f0565b600481905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368fbe23e836040518263ffffffff1660e01b815260040161076f9190610c3a565b600060405180830381865afa15801561078c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107b59190610e5c565b61010001516009819055506009549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610862919061109b565b5050509150506000670de0b6b3a7640000858361087f9190611116565b6108899190610f03565b9050809250505092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108fd826108b4565b810181811067ffffffffffffffff8211171561091c5761091b6108c5565b5b80604052505050565b600061092f610896565b905061093b82826108f4565b919050565b600067ffffffffffffffff82111561095b5761095a6108c5565b5b610964826108b4565b9050602081019050919050565b82818337600083830152505050565b600061099361098e84610940565b610925565b9050828152602081018484840111156109af576109ae6108af565b5b6109ba848285610971565b509392505050565b600082601f8301126109d7576109d66108aa565b5b81356109e7848260208601610980565b91505092915050565b60008060408385031215610a0757610a066108a0565b5b600083013567ffffffffffffffff811115610a2557610a246108a5565b5b610a31858286016109c2565b925050602083013567ffffffffffffffff811115610a5257610a516108a5565b5b610a5e858286016109c2565b9150509250929050565b6000819050919050565b610a7b81610a68565b82525050565b6000602082019050610a966000830184610a72565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac782610a9c565b9050919050565b610ad781610abc565b82525050565b6000602082019050610af26000830184610ace565b92915050565b6000819050919050565b6000610b1d610b18610b1384610a9c565b610af8565b610a9c565b9050919050565b6000610b2f82610b02565b9050919050565b6000610b4182610b24565b9050919050565b610b5181610b36565b82525050565b6000602082019050610b6c6000830184610b48565b92915050565b600060208284031215610b8857610b876108a0565b5b600082013567ffffffffffffffff811115610ba657610ba56108a5565b5b610bb2848285016109c2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bf5578082015181840152602081019050610bda565b60008484015250505050565b6000610c0c82610bbb565b610c168185610bc6565b9350610c26818560208601610bd7565b610c2f816108b4565b840191505092915050565b60006020820190508181036000830152610c548184610c01565b905092915050565b600080fd5b600080fd5b6000610c79610c7484610940565b610925565b905082815260208101848484011115610c9557610c946108af565b5b610ca0848285610bd7565b509392505050565b600082601f830112610cbd57610cbc6108aa565b5b8151610ccd848260208601610c66565b91505092915050565b610cdf81610a68565b8114610cea57600080fd5b50565b600081519050610cfc81610cd6565b92915050565b60006101808284031215610d1957610d18610c5c565b5b610d24610180610925565b9050600082015167ffffffffffffffff811115610d4457610d43610c61565b5b610d5084828501610ca8565b600083015250602082015167ffffffffffffffff811115610d7457610d73610c61565b5b610d8084828501610ca8565b6020830152506040610d9484828501610ced565b6040830152506060610da884828501610ced565b6060830152506080610dbc84828501610ced565b60808301525060a0610dd084828501610ced565b60a08301525060c0610de484828501610ced565b60c08301525060e0610df884828501610ced565b60e083015250610100610e0d84828501610ced565b61010083015250610120610e2384828501610ced565b61012083015250610140610e3984828501610ced565b61014083015250610160610e4f84828501610ced565b6101608301525092915050565b600060208284031215610e7257610e716108a0565b5b600082015167ffffffffffffffff811115610e9057610e8f6108a5565b5b610e9c84828501610d02565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f0e82610a68565b9150610f1983610a68565b925082610f2957610f28610ea5565b5b828204905092915050565b6000606082019050610f496000830186610ace565b610f566020830185610ace565b610f636040830184610a72565b949350505050565b60008115159050919050565b610f8081610f6b565b8114610f8b57600080fd5b50565b600081519050610f9d81610f77565b92915050565b600060208284031215610fb957610fb86108a0565b5b6000610fc784828501610f8e565b91505092915050565b60006080820190508181036000830152610fea8187610c01565b9050610ff96020830186610a72565b6110066040830185610ace565b81810360608301526110188184610c01565b905095945050505050565b600069ffffffffffffffffffff82169050919050565b61104281611023565b811461104d57600080fd5b50565b60008151905061105f81611039565b92915050565b6000819050919050565b61107881611065565b811461108357600080fd5b50565b6000815190506110958161106f565b92915050565b600080600080600060a086880312156110b7576110b66108a0565b5b60006110c588828901611050565b95505060206110d688828901611086565b94505060406110e788828901610ced565b93505060606110f888828901610ced565b925050608061110988828901611050565b9150509295509295909350565b600061112182610a68565b915061112c83610a68565b925082820261113a81610a68565b9150828204841483151761115157611150610ed4565b5b509291505056fea264697066735822122091d1d365a169f0770027a6fb7334cea6e9e84501063a2e43603841bed5a57ef364736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1476,
        "contract": "contracts/TokenSale.sol:AssetTokenSale",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1478,
        "contract": "contracts/TokenSale.sol:AssetTokenSale",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1481,
        "contract": "contracts/TokenSale.sol:AssetTokenSale",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 1483,
        "contract": "contracts/TokenSale.sol:AssetTokenSale",
        "label": "priceFeedAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1485,
        "contract": "contracts/TokenSale.sol:AssetTokenSale",
        "label": "maticPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1487,
        "contract": "contracts/TokenSale.sol:AssetTokenSale",
        "label": "balance",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1489,
        "contract": "contracts/TokenSale.sol:AssetTokenSale",
        "label": "userAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1491,
        "contract": "contracts/TokenSale.sol:AssetTokenSale",
        "label": "tokensPurchase",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1494,
        "contract": "contracts/TokenSale.sol:AssetTokenSale",
        "label": "assetNewToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(AssetNewToken)1470"
      },
      {
        "astId": 1496,
        "contract": "contracts/TokenSale.sol:AssetTokenSale",
        "label": "maticsRequiredForOneToken",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(AssetNewToken)1470": {
        "encoding": "inplace",
        "label": "contract AssetNewToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}